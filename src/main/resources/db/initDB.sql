DROP TABLE VOTES IF EXISTS;
DROP TABLE USER_ROLES IF EXISTS;
DROP TABLE DISHES IF EXISTS;
DROP TABLE RESTAURANTS IF EXISTS;
DROP TABLE USERS IF EXISTS;


DROP SEQUENCE global_seq IF EXISTS;

CREATE SEQUENCE GLOBAL_SEQ AS INTEGER START WITH 100000;

CREATE TABLE users
(
    id         INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
    name       VARCHAR(255)            NOT NULL,
    email      VARCHAR(255)            NOT NULL,
    password   VARCHAR(255)            NOT NULL,
    registered TIMESTAMP DEFAULT now() NOT NULL,
    enabled    BOOLEAN   DEFAULT TRUE  NOT NULL
);
CREATE UNIQUE INDEX users_unique_email_idx
    ON USERS (email);

CREATE TABLE user_roles
(
    user_id INTEGER NOT NULL,
    role    VARCHAR(255),
    CONSTRAINT user_roles_idx UNIQUE (user_id, role),
    FOREIGN KEY (user_id) REFERENCES USERS (id) ON DELETE CASCADE
);

CREATE TABLE RESTAURANTS
(
    id      INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
    name    VARCHAR(255)            NOT NULL,
    created TIMESTAMP DEFAULT now() NOT NULL

);

CREATE TABLE DISHES
(
    id            INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
    created       DATE DEFAULT now() NOT NULL,
    restaurant_id INTEGER            NOT NULL,
    name          VARCHAR(255)       NOT NULL,
    price         INTEGER            NOT NULL,
    CONSTRAINT dishes_restaurant_fk FOREIGN KEY (restaurant_id)
        REFERENCES RESTAURANTS (id) ON DELETE CASCADE
);

CREATE TABLE VOTES
(
    id            INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
    created       DATE DEFAULT now() NOT NULL,
    restaurant_id INTEGER            NOT NULL,
    user_id       INTEGER            NOT NULL,

    CONSTRAINT votes_restaurant_fk FOREIGN KEY (restaurant_id)
        REFERENCES RESTAURANTS (id) ON DELETE CASCADE,
    CONSTRAINT votes_user_fk FOREIGN KEY (user_id)
        REFERENCES USERS (id) ON DELETE CASCADE

);
